" Configuration file for vim

" X clipboard
set clipboard=unnamedplus

" Don't read modelines to avoid potentially malicious commands
set modelines=0

" We're using vim, not vi!
set nocompatible

" show relative line numbers
set nu
set rnu

" don't wrap lines that are longer than the buffer is wide
set nowrap

" split to the right
set splitright

" split to the bottom
set splitbelow

" Smarter backspace
set backspace=indent,eol,start

" Don't save a backup file
set nobackup

" Save a viminfo file, max length 1000 registers
set viminfo='20,\"1000

" Save 100 lines of history
set history=100

" Always show the cursor position
set ruler

" Enable syntax highlighting
syntax on
set hlsearch

syntax enable
filetype plugin on

" Show matching brackets
set showmatch
" Case insensitive matching
"set ignorecase
" If search has Uppercase letters, it's case sensitive
"set smartcase
" Incremental search (as the pattern is typed)
set incsearch

" Set tab width
set ts=4
set sw=4
set sts=4
set expandtab

" Make shift-tab insert real tabs
inoremap <S-Tab> <C-V><Tab>

" Persistent undo!
"if has('persistent_undo')
"    " So is persistent undo ...
"    set undofile
"    " Maximum number of changes that can be undone
"    set undolevels=1000
"    " Maximum number lines to save for undo on a buffer reload
"    set undoreload=10000
"endif

" Set max number of open buffers to 50
set tabpagemax=50

" Highlight trailing whitespace
highlight TrailingWhitespace ctermbg=red guibg=red
au ColorScheme * highlight TrailingWhitespace ctermbg=red guibg=red
au BufEnter * match TrailingWhitespace /\s\+$/
au InsertEnter * match TrailingWhitespace /\s\+\%#\@<!$/
au InsertLeave * match TrailingWhitespace /\s\+$/

" When editing a file, always jump to the last cursor position
if has("autocmd")
 autocmd BufReadPost * if line("'\"") > 0 && line ("'\"") <= line("$") | exe "normal g'\"" | endif
endif

" Make vim autocompletion more like bash
set wildmode=longest:full
set wildmenu

" Map space and ctl-space to pageup and pagedown
map <space> :set scroll=0<CR>:set scroll^=2<CR>:set scroll-=1<CR><C-D>:set scroll=0<CR>
map <c-@> <c-space>
map <c-space> :set scroll=0<CR>:set scroll^=2<CR>:set scroll-=1<CR><C-U>:set scroll=0<CR>

" Map ctl-movement to split buffer movement
map <C-k> <C-w><Up>
map <C-j> <C-w><Down>
map <C-l> <C-w><Right>
map <C-g> <C-w><Left>

" Map H and L to tab buffer movement
map H :tabp<cr>
map L :tabn<cr>

map <C-p> :FZF<cr>

" runtimepath for my beautiful haskell
set runtimepath+=~/.dotfiles/vim/vim2hs

call plug#begin('~/.vim/plugged')
Plug 'git@github.com:ElmCast/elm-vim.git'
Plug 'git@github.com:vim-syntastic/syntastic.git'
Plug 'git@github.com:junegunn/fzf.vim.git'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'git@github.com:neovimhaskell/haskell-vim.git'
Plug 'git@github.com:rust-lang/rust.vim.git'
Plug 'git@github.com:tpope/vim-fugitive.git'
Plug 'git@github.com:airblade/vim-gitgutter.git'
Plug 'git@github.com:fatih/vim-go.git'
Plug 'git@github.com:prettier/vim-prettier.git'
Plug 'git@github.com:racer-rust/vim-racer.git'
Plug 'git@github.com:tpope/vim-rhubarb.git'
Plug 'git@github.com:pangloss/vim-javascript.git'
call plug#end()

let g:haskell_conceal_wide = 0
let g:haskell_conceal = 0
let g:haskell_conceal_enumerations = 0
let g:jmacro_conceal = 0

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0

let g:syntastic_go_checkers = ['go', 'gofmt', 'errcheck']

let g:go_fmt_command = "goimports"
let g:go_fmt_autosave = 1
let g:go_auto_type_info = 0

let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_fields = 1
let g:go_highlight_types = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
